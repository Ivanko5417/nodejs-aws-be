service:
  name: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: '2'

custom:
  bucket: rs-app-import-service
  AWSRegion: eu-west-1
  sqsQueueName: ${cf:product-service-dev.SQSQueueName}
  basicAuthorizerName: authorization-service-${opt:stage, 'dev'}-basicAuthorizer
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin
provider:
  name: aws
  runtime: nodejs12.x
  profile: rsAppAccount
  region: ${self:custom.AWSRegion}
  endpointType: regional
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    S3_BUCKET_NAME: ${self:custom.bucket}
    SQS_QUEUE_NAME: ${self:custom.sqsQueueName}
    REGION: ${self:custom.AWSRegion}
    AWS_ACCOUNT_NUMBER: !Ref AWS::AccountId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "sqs:SendMessage"
      Resource:
        - Fn::Sub: "arn:aws:sqs:${self:custom.AWSRegion}:${AWS::AccountId}:${self:custom.sqsQueueName}"
    - Effect: Allow
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::${self:custom.bucket}"
    - Effect: Allow
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::${self:custom.bucket}/*"

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          method: get
          path: /import
          cors: true
          authorizer:
            name: basicAuthorizer
            type: token
            resultTtlInSeconds: 0
            IdentitySource: method.request.header.Authorization
            arn: !Sub "arn:aws:lambda:${self:custom.AWSRegion}:${AWS::AccountId}:function:authorization-service-dev-basicAuthorizer"
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
resources:
  Resources:
    GatewayResponse4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
